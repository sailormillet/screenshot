/*! millet Creation Time : Mon Jan 22 2018 11:17:16 GMT+0800 (CST) */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var mainTpl = __webpack_require__(1);
__webpack_require__(2);
//import '../../common/jquery-2.1.0.min'
//let $ =require('../../common/jquery-2.1.0.min.js')
var UI = $('body');
var obj = {
  width1: document.body.clientWidth, //body的宽度
  height1: document.body.clientHeight,
  width2: $(window).width(),
  height2: $(window).height()
};
console.log($('#topbg').height());
console.log(obj.width1);
console.log(obj.height1);
console.log(obj.width2);
console.log(obj.height2);
UI.append(mainTpl(obj));
var canvas = document.getElementById('stockGraph');

if (canvas.getContext) {
  var drawSpirograph = function drawSpirograph(ctx, R, r, O) {
    var x1 = R - O;
    var y1 = 0;
    var i = 1;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    do {
      if (i > 20000) break;
      var x2 = (R + r) * Math.cos(i * Math.PI / 72) - (r + O) * Math.cos((R + r) / r * (i * Math.PI / 72));
      var y2 = (R + r) * Math.sin(i * Math.PI / 72) - (r + O) * Math.sin((R + r) / r * (i * Math.PI / 72));
      ctx.lineTo(x2, y2);
      x1 = x2;
      y1 = y2;
      i++;
    } while (x2 != R - O && y2 != 0);
    ctx.stroke();
  };

  // var ctx = canvas.getContext('2d');
  // ctx.fillStyle="#ffffff";
  // ctx.fillRect(0, 0, obj.width2, obj.height2)
  // var img = document.getElementById("topbg");
  // img.onload = function() {
  //     ctx.drawImage(img,0,0,obj.width2,$('#topbg').height());
  // }
  // ctx.fillStyle="#000";
  // ctx.font="16px 'PingFang SC',tahoma,arial,'helvetica neue','hiragino sans gb','microsoft yahei',sans-serif";
  // ctx.textBaseline = "middle";
  // //ctx.measureText(text)  测量字体的宽高度
  // ctx.textAlign = "justify"
  // ctx.fillText("December 27,2017",15,220);
  // ctx.fillText("hello everybody,",32,242);
  // var str = "I'm Millet,this is my first canvas demo,This demo uses Canvas to draw a picture and use html2canvas to screenshot a picture"
  // var bodyWidth = obj.width1;
  // var lineWidth = 0;
  // var initHeight=265;//绘制字体距离canvas顶部初始的高度
  // var lastSubStrIndex= 0; //每次开始截取的字符串的索引
  // console.log(bodyWidth);
  //  for(var i = 0; i<str.length;i++){
  //     lineWidth+=ctx.measureText(str[i]).width;
  //     if(lineWidth > bodyWidth - 20){
  //         console.log(lineWidth);
  //         console.log(str.substring(lastSubStrIndex,i))
  //         ctx.fillText(str.substring(lastSubStrIndex,i),15,initHeight)
  //         lastSubStrIndex =i;
  //         initHeight +=20;
  //         lineWidth =0
  //     }
  //  }
  //  ctx.fillText(str.substring(lastSubStrIndex,i),15,initHeight)
  // ctx.fillText("I'm Millet,this is my first canvas demo,This demo uses Canvas to draw a picture and use html2canvas to screenshot a picture",32,265);
  // drawing code here


  // var ctx = document.getElementById('stockGraph ').getContext('2d');

  // ctx.fillRect(0,0,150,150);   // 使用默认设置绘制一个矩形
  // ctx.save();                  // 保存默认状态

  // ctx.fillStyle = '#09F'       // 在原有配置基础上对颜色做改变
  // ctx.fillRect(15,15,120,120); // 使用新的设置绘制一个矩形

  // ctx.save();                  // 保存当前状态
  // ctx.fillStyle = '#FFF'       // 再次改变颜色配置
  // ctx.globalAlpha = 0.5;    
  // ctx.fillRect(30,30,90,90);   // 使用新的配置绘制一个矩形

  // ctx.restore();               // 重新加载之前的颜色状态
  // ctx.fillRect(45,45,60,60);   // 使用上一次的配置绘制一个矩形

  // ctx.restore();               // 加载默认颜色配置
  // ctx.fillRect(60,60,30,30);   // 使用加载的配置绘制一个矩形


  var ctx = document.getElementById('stockGraph').getContext('2d');
  ctx.fillRect(0, 0, 300, 300);
  for (var i = 0; i < 3; i++) {
    for (var j = 0; j < 3; j++) {
      ctx.save();
      ctx.strokeStyle = "#9CFF00";
      ctx.translate(50 + j * 100, 50 + i * 100);
      drawSpirograph(ctx, 20 * (j + 2) / (j + 1), -8 * (i + 3) / (i + 1), 10);
      ctx.restore();
    }
  }
} else {
    // canvas-unsupported code here
  }

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = function (_, _method) {_method= _method || {},_method.__escapehtml={escapehash:{"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#x27;","/":"&#x2f;"},escapereplace:function(e){return _method.__escapehtml.escapehash[e]},escaping:function(e){return"string"!=typeof e?e:e.replace(/[&<>"']/gim,this.escapereplace)},detection:function(e){return"undefined"==typeof e?"":e}},_method.__throw=function(e){if("undefined"!=typeof console){if(console.warn)return void console.warn(e);if(console.log)return void console.log(e)}throw e};
'use strict';var _=_||{};var _out='';_out+=''; try { _out+=''; var canvas=_.canvas;var div=_.div;var img=_.img;var bag=_.bag;var p=_.p;var December=_.December;var hello=_.hello;var I=_.I;var This=_.This;var br=_.br;var main=_.main; _out+='<canvas id="stockGraph" width="750" height="1206" >     您的浏览器不支持 HTML5 canvas 标签. </canvas> <div class="main">     <img id="topbg" src="../img/canvas/bag.png" alt="">     <div class="content">         <p>December 27,2017</p>         <p>hello everybody,</p>         <p>I\'m Millet,this is my first canvas demo,This demo uses Canvas to draw a picture and use html2canvas to screenshot a picture<br/></p>      </div>  </div> <!--</canvas>-->  <!--<canvas id="clock" width="150" height="150">-->     <!--<img src="//127.0.0.1:8080/img/canvas/main.png" width="150" height="150" alt=""/>--> <!--</canvas>-->'; } catch(e) {_method.__throw("Juicer Render Exception: "+e.message);} _out+='';return _out;
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"main":"main","content":"content"};

/***/ })
/******/ ]);